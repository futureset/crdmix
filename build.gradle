defaultTasks 'release'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'project-report'

sourceCompatibility = JavaVersion.VERSION_20

version = '1.0'

mainClassName = "com.crdmix.main.Main"

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.9"
}

jar {
    manifest {
        attributes 'Implementation-Title': 'CrowdMix Chat', 'Implementation-Version': project.version
        attributes 'Main-Class': mainClassName
    }
}

configurations {
	acceptanceTestImplementation.extendsFrom(implementation)
	acceptanceTestRuntimeOnly.extendsFrom(runtimeOnly)

}

sourceSets {
	
	test {
		java {
			srcDir 'src/unit/java'
		}
	}
	
	acceptance {
		compileClasspath+=sourceSets.test.runtimeClasspath
		runtimeClasspath+=sourceSets.test.runtimeClasspath
		java {
			srcDir 'src/bdd/java'
		}
		
		resources {
			srcDir 'src/bdd/resources'
		}
	}
}


dependencies {
	constraints {
		acceptanceImplementation("org.apache.commons:commons-text:1.10.0") {
			because ' maven:org.apache.commons:commons-text:1.9 CVE-2022-42889 9.8 Improper Control of Generation of Code (\'Code Injection\') vulnerability'
		}
	}
	implementation group: 'org.springframework', name: 'spring-context', version: spring_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
	testImplementation("org.mockito:mockito-junit-jupiter:5.3.1")
	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.0.0'
	acceptanceImplementation group: 'org.springframework', name: 'spring-test', version: spring_version
	acceptanceImplementation "org.junit.vintage:junit-vintage-engine:5.8.2"
	acceptanceImplementation group: 'org.jbehave', name: 'jbehave-core', version: '5.1'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

tasks.register('acceptanceTest', Test) {
	group = 'verification'
	shouldRunAfter test
	classpath=project.sourceSets.acceptance.runtimeClasspath
	testClassesDirs=project.sourceSets.acceptance.output.classesDirs
	finalizedBy 'jacocoAcceptanceTestReport'
}

tasks.register('jacocoAcceptanceTestReport', JacocoReport) {
	group = 'verification'
	classDirectories.from(sourceSets.main.output.classesDirs)
	executionData(project.tasks.acceptanceTest)
}

tasks.register('jacocoAcceptanceTestCoverageVerification', JacocoCoverageVerification) {
	group = 'verification'
	classDirectories.from(sourceSets.main.output.classesDirs)
	executionData(project.tasks.acceptanceTest)
	mustRunAfter tasks.jacocoAcceptanceTestReport
	violationRules {
		rule {
			limit {
				minimum = 1.0
			}
		}
	}
}

jacocoTestCoverageVerification {
	mustRunAfter tasks.jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 1.0
			}
		}

	}
}
check.dependsOn acceptanceTest,jacocoTestCoverageVerification,jacocoTestCoverageVerification

// used to generate gradle wrapper scripts
// don't run if gradlew exists
wrapper {
	gradleVersion = "$gradle_version"
}