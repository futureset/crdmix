defaultTasks 'release'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'project-report'

sourceCompatibility = 1.8

version = '1.0'

mainClassName = "com.crdmix.main.Main"

repositories {
	mavenCentral()
}

jar {
    manifest {
        attributes 'Implementation-Title': 'CrowdMix Chat', 'Implementation-Version': version
        attributes 'Main-Class': mainClassName
    }
}

configurations {
	unitCompile.extendsFrom compile
	acceptanceCompile.extendsFrom unitCompile
}

sourceSets {
	
	unit {
		java {
			srcDir 'src/unit/java'
		}
	}
	
	acceptance {
		java {
			srcDir 'src/bdd/java'
		}
		
		resources {
			srcDir 'src/bdd/resources'
		}
	}
}


dependencies {
	unitCompile files(sourceSets.main.output)
	compile group: 'org.springframework', name: 'spring-context', version: '4.1.6.RELEASE'
	compile group: 'joda-time', name: 'joda-time', version: '2.7'
    unitCompile group: 'junit', name: 'junit', version: '4.12'
    unitCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    unitCompile group: 'org.assertj', name: 'assertj-core', version: '3.0.0'
    acceptanceCompile group: 'org.assertj', name: 'assertj-core', version: '3.0.0'
	acceptanceCompile group: 'org.springframework', name: 'spring-test', version: '4.1.6.RELEASE'
    acceptanceCompile group: 'org.jbehave', name: 'jbehave-core', version: '4.0-beta-11'
}



eclipse {
		classpath {
			plusConfigurations = [configurations.acceptanceRuntime,configurations.unitRuntime]
		}
}

idea {
    module {
        testSourceDirs += file('src/unit/java')
        testSourceDirs += file('src/bdd/java')
        scopes.TEST.plus += [ configurations.acceptanceRuntime,configurations.unitRuntime ]
    }
}

uploadArchives { 
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task unitTest(type: Test) {
	testClassesDir = sourceSets.unit.output.classesDir
    classpath = sourceSets.unit.runtimeClasspath
}

task acceptanceTest(type: Test) {
	testClassesDir = sourceSets.acceptance.output.classesDir
    classpath = sourceSets.acceptance.runtimeClasspath
}

task generateCoverageAndFailIfDrops {
    doLast {
    file("$reporting.baseDir/coverage").mkdirs()
    ant {
        taskdef(name:'jacocoreport', classname: 'org.jacoco.ant.ReportTask', classpath: configurations.jacocoAnt.asPath )
        jacocoreport {
            executiondata {
                fileset(dir: "build/jacoco") {
                include name: 'unitTest.exec'
                }
            }
            structure(name: project.name) {
                classfiles {
                    fileset(dir: sourceSets.main.output.classesDir) {
                        exclude name: '**/*Test'
                    }
                }
                sourcefiles(encoding: 'CP1252') {
                    fileset dir: sourceSets.main.java.srcDirs[0]
                }
            }
            check (failonviolation: true,violationsproperty: 'coverageerrors' ) {
                rule {
                    limit(counter:"LINE", value:"MISSEDCOUNT", maximum:"0")
                }
            }
            xml destfile: "$reporting.baseDir/coverage/jacoco.xml"
            html destdir: "$reporting.baseDir/coverage"
        }
     }
    }
    //TODO Fix this so it reports the violations of missing coverage correctly
    //Had to use this because Jacoco plugin does not support the 'check' element
}

generateCoverageAndFailIfDrops.dependsOn unitTest
test.dependsOn unitTest,acceptanceTest

acceptanceTest.shouldRunAfter unitTest

task release (description: "Full release") {
    dependsOn clean,test,generateCoverageAndFailIfDrops,distZip
}
// used to generate gradle wrapper scripts
// don't run if gradlew exists
task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}